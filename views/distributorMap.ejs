<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Food Connector</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css"
        integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous">
    <link rel="stylesheet" type="text/css" href="https://api.tomtom.com/maps-sdk-for-web/cdn/5.x/5.45.0/maps/maps.css">
    <script src="https://api.tomtom.com/maps-sdk-for-web/cdn/5.x/5.45.0/maps/maps-web.min.js"></script>
    <script src="https://api.tomtom.com/maps-sdk-for-web/cdn/5.x/5.45.0/services/services-web.min.js"></script>
    <link href="https://fonts.googleapis.com/css?family=Poppins:400,600,700|Roboto&display=swap" rel="stylesheet">
    <style>
        body {
            margin: 0;
        }

        #map {
            height: 100vh;
            width: 80vw;
        }

        .tt-form-label {
            position: fixed;
            z-index: 1;
        }

        h1 {
            color: green;
        }
        .modal {
            display: none;
            /* Hidden by default */
            position: fixed;
            /* Stay in place */
            z-index: 1;
            /* Sit on top */
            padding-top: 100px;
            /* Location of the box */
            left: 0;
            top: 0;
            width: 100%;
            /* Full width */
            height: 100%;
            /* Full height */
            overflow: auto;
            /* Enable scroll if needed */
            background-color: rgb(0, 0, 0);
            /* Fallback color */
            background-color: rgba(0, 0, 0, 0.4);
            /* Black w/ opacity */
        }

        /* Modal Content */
        .modal-content {
            background-color: #fefefe;
            margin: auto;
            padding: 20px;
            border: 1px solid #888;
            width: 40%;
        }

        /* The Close Button */
        .close {
            color: #aaaaaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
        }

        .close:hover,
        .close:focus {
            color: #000;
            text-decoration: none;
            cursor: pointer;
        }

        ::placeholder {
            /* Chrome, Firefox, Opera, Safari 10.1+ */
            color: #29C19E;
        }

        .changeReplaceInputColor::placeholder {
            /* WebKit, Blink, Edge */
            color: gray;
        }
        select{
   height: 30px;
}
    </style>
</head>

<body style="background-color: #C0382B;">
    <div class="container-fluid">
        <div class="row">
            <div class="col-3">
                <h1
                style="font-family: 'Poppins', sans-serif; color: white; font-weight: bold; font-size: 35px; text-align: center; margin-top: 25px;">
                Distributor</h1>                
                <div style="text-align: center;">
                    <button type="button" class="btn btn-success" style="font-family: 'Roboto', sans-serif; margin-bottom: 35px;" id="requestButton">Create a new distribution</button>
                </div>
                

                  <!-- The Modal -->
                  <div id="myModal" class="modal">

                    <!-- Modal content -->
                    <div class="modal-content">
                      <span class="close" id="close">&times;</span>

                      <form method="post" action="/newDistribution">
                        <label for="foods" style="font-family: 'Poppins', sans-serif; color: #C0382B; font-size: 20px;">Choose a food:</label>
                        <select id="foods" name="foods">
                            <option value="üçèApples">üçèApples</option>
                            <option value="ü•¨Greens">ü•¨Greens</option>
                            <option value="üçûBread">üçûBread</option>
                            <option value="üåΩCorn">üåΩCorn</option>
                        </select>
                        <br>
    
                        <label for="quantity" style="font-family: 'Poppins', sans-serif; color: #C0382B; font-size: 20px;">Quantity/pounds:</label>
                        <input type="number" id="quantity" name="quantity" min="1"> <br>
    
                        <label for="price" style="font-family: 'Poppins', sans-serif; color: #C0382B; font-size: 20px;">Price/item (leave as 0 if free):</label>
                        <input type="number" id="price" name="price" min="0"> <br>
    
                        <label for="address" style="font-family: 'Poppins', sans-serif; color: #C0382B; font-size: 20px;">Address:</label>
                        <input type="address" id="address" name="address" min="1"> <br>
    
                        <label for="expiration" style="font-family: 'Poppins', sans-serif; color: #C0382B; font-size: 20px;">Expiration date</label>
                        <input type="text" name="expiration" /> <br>
    
                        <label for="name" style="font-family: 'Poppins', sans-serif; color: #C0382B; font-size: 20px;">Name/Company Name</label>
                        <input type="text" name="name" /> <br>
    
                        <label for="foods" style="font-family: 'Poppins', sans-serif; color: #C0382B; font-size: 20px;">Are you an individual or an organization?</label>
                        <select id="typeOfUser" name="typeOfUser">
                            <option value="Individual">Individual</option>
                            <option value="Organization">Organization</option>
                        </select>
                        <br>
                        <label for="establishment" style="font-family: 'Poppins', sans-serif; color: #C0382B; font-size: 20px;">What kind of establishment are you?</label>
                        <select id="establishment" name="establishment">
                            <option value="Cafe">Cafe</option>
                            <option value="Shelter">Shelter</option>
                            <option value="Hotel">Hotel</option>
                            <option value="Restaurant">Restaurant</option>
                        </select>
                        <br>
                        <div class="form-actions">
                            <button class="btn btn-success" type="submit" style="font-family: 'Poppins', sans-serif; color: white;font-size: 20px;">Send</button>
                        </div>
                    </form>

                    </div>
                    <script>
                      // Get the modal

                      // Get the button that opens the modal

                      var modal = document.getElementById("myModal");

                      // Get the button that opens the modal
                      var btn = document.getElementById("requestButton");

                      // Get the <span> element that closes the modal
                      var span = document.getElementById("close");


                      // When the user clicks the button, open the modal 
                      btn.onclick = function () {
                        modal.style.display = "block";
                      }

    
                      // When the user clicks on <span> (x), close the modal
                      span.onclick = function () {
                        modal.style.display = "none";
                      }

                      // When the user clicks anywhere outside of the modal, close it
                      window.onclick = function (event) {
                        if (event.target == modal) {
                          modal.style.display = "none";
                        }
                        
                      }
                    </script>
                  </div>

                <script>
                    document.getElementById("consumerRequestForm").style.display = "none";

                    document.getElementById("formHider").addEventListener("click", function () {
                        document.getElementById("consumerRequestForm").style.display = "block";
                    });

                </script>
                
            </div>
            <div class="col-9">
                <div id="map">
                </div>
            </div>
        </div>
    </div>
    <script>
        var map = tt.map({
            key: 'PULYzrAblFY0Hoyr6hyGMpYzTTu1tiGT',
            container: 'map',
            style: 'tomtom://vector/1/basic-main'
        });
        map.addControl(new tt.FullscreenControl());
        map.addControl(new tt.NavigationControl());

        var markersOnTheMap = {};
        var eventListenersAdded = false;

        var points = [
        <% for (let index = 0; index < total; index++) { %>
        {
            coordinates: [<%= longitudes[index] %>, <%= latitudes[index] %>],
            properties: {
                id: <%= latitudes[index] %>,
                name: "<%= foods[index] %>",
                quantities: "<%= quantities[index] %>",
                consumerNotes: "<%= consumerNotes[index] %>",
                typesOfUser: "<%= typesOfUser[index] %>",
                dates: "<%= dates[index] %>"
            }
        },
    <% } %>
        ];
        var geoJson = {
            type: 'FeatureCollection',
            features: points.map(function (point) {
                return {
                    type: 'Feature',
                    geometry: {
                        type: 'Point',
                        coordinates: point.coordinates
                    },
                    properties: point.properties
                };
            })
        };

        function refreshMarkers() {
            Object.keys(markersOnTheMap).forEach(function (id) {
                markersOnTheMap[id].remove();
                delete markersOnTheMap[id];
            });

            map.querySourceFeatures('point-source').forEach(function (feature) {
                if (feature.properties && !feature.properties.cluster) {
                    var id = parseInt(feature.properties.id, 10);
                    if (!markersOnTheMap[id]) {
                        var newMarker = new tt.Marker().setLngLat(feature.geometry.coordinates);
                        newMarker.addTo(map);
                        newMarker.setPopup(new tt.Popup({ offset: 30 }).setHTML(`<h2 style="text-align: center;">${feature.properties.name}</h2><br><p style="font-size: 15px;"><span style="font-weight: bold">Quantitiy in pounds:</span> ${feature.properties.quantities}<br><br><span style="font-weight: bold">Special notes:</span> ${feature.properties.consumerNotes}<br><br> <span style="font-weight: bold">Address:</span> ${feature.properties.addresses} <br><br> <span style="font-weight: bold">Date posted:</span> ${feature.properties.dates} <br> </p>`));
                        markersOnTheMap[id] = newMarker;
                    }
                }
            });
        }

        map.on('load', function () {
            map.addSource('point-source', {
                type: 'geojson',
                data: geoJson,
                cluster: true,
                clusterMaxZoom: 14,
                clusterRadius: 50
            });

            map.addLayer({
                id: 'clusters',
                type: 'circle',
                source: 'point-source',
                filter: ['has', 'point_count'],
                paint: {
                    'circle-color': [
                        'step',
                        ['get', 'point_count'],
                        '#EC619F',
                        4,
                        '#008D8D',
                        7,
                        '#004B7F'
                    ],
                    'circle-radius': [
                        'step',
                        ['get', 'point_count'],
                        15,
                        4,
                        20,
                        7,
                        25
                    ],
                    'circle-stroke-width': 1,
                    'circle-stroke-color': 'white',
                    'circle-stroke-opacity': 1
                }
            });

            map.addLayer({
                id: 'cluster-count',
                type: 'symbol',
                source: 'point-source',
                filter: ['has', 'point_count'],
                layout: {
                    'text-field': '{point_count_abbreviated}',
                    'text-size': 16
                },
                paint: {
                    'text-color': 'white'
                }
            });

            map.on('data', function (e) {
                if (e.sourceId !== 'point-source' || !map.getSource('point-source').loaded()) return;
                refreshMarkers();

                if (!eventListenersAdded) {
                    map.on('move', refreshMarkers);
                    map.on('moveend', refreshMarkers);
                    eventListenersAdded = true;
                }
            });

            map.on('click', 'clusters', function (e) {
                var features = map.queryRenderedFeatures(e.point, { layers: ['clusters'] });
                var clusterId = features[0].properties.cluster_id;
                map.getSource('point-source').getClusterExpansionZoom(clusterId, function (err, zoom) {
                    if (err) {
                        return;
                    }

                    map.easeTo({
                        center: features[0].geometry.coordinates,
                        zoom: zoom + 0.5
                    });
                });
            });

            map.on('mouseenter', 'clusters', function () {
                map.getCanvas().style.cursor = 'pointer';
            });

            map.on('mouseleave', 'clusters', function () {
                map.getCanvas().style.cursor = '';
            });
        });
    </script>
    <script src="https://code.jquery.com/jquery-3.4.1.slim.min.js"
        integrity="sha384-J6qa4849blE2+poT4WnyKhv5vZF5SrPo0iEjwBvKU7imGFAV0wwj1yYfoRSJoZ+n"
        crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js"
        integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo"
        crossorigin="anonymous"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js"
        integrity="sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6"
        crossorigin="anonymous"></script>
</body>

</html>