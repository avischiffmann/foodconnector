<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Food Connector</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css"
        integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous">
    <link rel="stylesheet" type="text/css" href="https://api.tomtom.com/maps-sdk-for-web/cdn/5.x/5.45.0/maps/maps.css">
    <script src="https://api.tomtom.com/maps-sdk-for-web/cdn/5.x/5.45.0/maps/maps-web.min.js"></script>
    <script src="https://api.tomtom.com/maps-sdk-for-web/cdn/5.x/5.45.0/services/services-web.min.js"></script>
    <style>
        body {
            margin: 0;
        }

        #map {
            height: 100vh;
            width: 80vw;
        }

        .tt-form-label {
            position: fixed;
            z-index: 1;
        }

        h1 {
            color: green;
        }
    </style>
</head>

<body>
    <div class="container-fluid">
        <div class="row">
            <div class="col-3">
                <h1>Requests</h1>
                <form action="consumerFilterGreens" method="post">
                    <input type="submit" name="consumerFilterGreens" value="consumerFilterGreens"/>
                </form>

                <form method="post" action="/newRequest">
                    <label for="foods">Choose a food:</label>
                    <select id="foods" name="foods">
                        <option value="üçèApples">üçèApples</option>
                        <option value="ü•¨Greens">ü•¨Greens</option>
                        <option value="üçûBread">üçûBread</option>
                        <option value="üåΩCorn">üåΩCorn</option>
                    </select>
                    <br>

                    <label for="quantity">Quantity:</label>
                    <input type="number" id="quantity" name="quantity" min="1"> <br>

                    <label for="notes">Any special notes?</label>
                    <input type="text" name="notes" /> <br>
                    <label for="foods">Are you an individual or an organization?</label>
                    <select id="typeOfUser" name="typeOfUser">
                        <option value="Individual">Individual</option>
                        <option value="Organization">Organization</option>
                    </select>
                    <br>
                    <label for="address">Address:</label>
                    <input type="address" id="address" name="address" min="1"> <br>
                    <div class="form-actions">
                        <button class="button" type="submit">Send</button>
                    </div>
                </form>

                <h2>Recent Requests</h2>
                <% for( let index = 0; index < totalRequests; index++ ) { %>
                    <div class="card" style="width: 18rem;">
                        <div class="card-body">
                            <h5 class="card-title"><%= quantities[index] %> <%= foods[index] %></h5>
                            <p class="card-text"><%= consumerNotes[index] %> </p>
                            <p class="card-text"><%= dates[index] %> </p>
                            <p class="card-text"><%= typesOfUser[index] %> </p>
                        </div>
                    </div>
                <% } %>
            </div>
            <div class="col-9">
                <div id="map">
                </div>
            </div>
        </div>
    </div>
    <script>
        var map = tt.map({
            key: 'PULYzrAblFY0Hoyr6hyGMpYzTTu1tiGT',
            container: 'map',
            center: [-0.128666, 51.505814],
            style: 'tomtom://vector/1/basic-main',
            zoom: 10
        });
        map.addControl(new tt.FullscreenControl());
        map.addControl(new tt.NavigationControl());

        var markersOnTheMap = {};
        var eventListenersAdded = false;

        var points = [
        <% for (let index = 0; index < total; index++) { %>
           <% if (distributorFoods[index] == "ü•¨Greens") { %>
            {
            coordinates: [<%= longitudes[index] %>, <%= latitudes[index] %>],
            properties: {
                id: <%= latitudes[index] %>,
                name: "<%= names[index] %>",
                foodQuantities: "<%= foodQuantities[index] %>",
                distributorFoods: "<%= distributorFoods[index] %>",
                addresses: "<%= addresses[index] %>",
                establishments: "<%= establishments[index] %>",
                prices: "<%= prices[index] %>",
                expirations: "<%= expirations[index] %>"
            }
        },
        <% } %> 
        
    <% } %>
        ];
        var geoJson = {
            type: 'FeatureCollection',
            features: points.map(function (point) {
                return {
                    type: 'Feature',
                    geometry: {
                        type: 'Point',
                        coordinates: point.coordinates
                    },
                    properties: point.properties
                };
            })
        };

        function refreshMarkers() {
            Object.keys(markersOnTheMap).forEach(function (id) {
                markersOnTheMap[id].remove();
                delete markersOnTheMap[id];
            });

            map.querySourceFeatures('point-source').forEach(function (feature) {
                if (feature.properties && !feature.properties.cluster) {
                    var id = parseInt(feature.properties.id, 10);
                    if (!markersOnTheMap[id]) {
                        var newMarker = new tt.Marker().setLngLat(feature.geometry.coordinates);
                        newMarker.addTo(map);
                        newMarker.setPopup(new tt.Popup({ offset: 30 }).setHTML(`<h1>${feature.properties.name}</h1><br><p>${feature.properties.foodQuantities} ${feature.properties.distributorFoods}</p><br><p>${feature.properties.addresses}</p><p>${feature.properties.establishments}</p><p>${feature.properties.prices}</p><p>${feature.properties.expirations}</p>`));
                        markersOnTheMap[id] = newMarker;
                    }
                }
            }); 
        }

        map.on('load', function () {
            map.addSource('point-source', {
                type: 'geojson',
                data: geoJson,
                cluster: true,
                clusterMaxZoom: 14,
                clusterRadius: 50
            });

            map.addLayer({
                id: 'clusters',
                type: 'circle',
                source: 'point-source',
                filter: ['has', 'point_count'],
                paint: {
                    'circle-color': [
                        'step',
                        ['get', 'point_count'],
                        '#EC619F',
                        4,
                        '#008D8D',
                        7,
                        '#004B7F'
                    ],
                    'circle-radius': [
                        'step',
                        ['get', 'point_count'],
                        15,
                        4,
                        20,
                        7,
                        25
                    ],
                    'circle-stroke-width': 1,
                    'circle-stroke-color': 'white',
                    'circle-stroke-opacity': 1
                }
            });

            map.addLayer({
                id: 'cluster-count',
                type: 'symbol',
                source: 'point-source',
                filter: ['has', 'point_count'],
                layout: {
                    'text-field': '{point_count_abbreviated}',
                    'text-size': 16
                },
                paint: {
                    'text-color': 'white'
                }
            });

            map.on('data', function (e) {
                if (e.sourceId !== 'point-source' || !map.getSource('point-source').loaded()) return;
                refreshMarkers();

                if (!eventListenersAdded) {
                    map.on('move', refreshMarkers);
                    map.on('moveend', refreshMarkers);
                    eventListenersAdded = true;
                }
            });

            map.on('click', 'clusters', function (e) {
                var features = map.queryRenderedFeatures(e.point, { layers: ['clusters'] });
                var clusterId = features[0].properties.cluster_id;
                map.getSource('point-source').getClusterExpansionZoom(clusterId, function (err, zoom) {
                    if (err) {
                        return;
                    }

                    map.easeTo({
                        center: features[0].geometry.coordinates,
                        zoom: zoom + 0.5
                    });
                });
            });

            map.on('mouseenter', 'clusters', function () {
                map.getCanvas().style.cursor = 'pointer';
            });

            map.on('mouseleave', 'clusters', function () {
                map.getCanvas().style.cursor = '';
            });
        });
    </script>
    <script src="https://code.jquery.com/jquery-3.4.1.slim.min.js"
        integrity="sha384-J6qa4849blE2+poT4WnyKhv5vZF5SrPo0iEjwBvKU7imGFAV0wwj1yYfoRSJoZ+n"
        crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js"
        integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo"
        crossorigin="anonymous"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js"
        integrity="sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6"
        crossorigin="anonymous"></script>
</body>

</html>